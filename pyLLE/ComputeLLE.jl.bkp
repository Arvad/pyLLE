using HDF5
using Base
using ProgressMeter

function Loadh5Param(dir)
    h5file = dir * "ParamLLEJulia.h5"
    res = Dict()
    sim = Dict()
    sim_name = ["res", "sim"]
    par = [["Qc", "R", "ng", "Qi", "γ"], ["δω_init","Pin", "Tscan", "δω_end", "f_pmp", "μ_sim", "μ_fit", "dφ"]] 
    cnt = 1
    for sim_par = [res, sim]
        for it = par[cnt]
            sim_par[it] = h5read(h5file, sim_name[cnt] *"/" * it)
        end
        cnt += 1
    end
    return res, sim
end


function SaveResults(dir, S)
    h5file = dir * "ResultsJulia.h5"
    h5open(h5file, "w") do file
        g = g_create(file, "Results") # create a group
        for ii in S
            g[ii[1]*"Real"] = real(ii[2])              # create a scalar dataset inside the group
            g[ii[1]*"Imag"] = imag(ii[2])
        end
        attrs(g)["Description"] = "This group contains only a single dataset" # an attribute
    end
        # attrs(g)["Description"] = "This group contains only a single dataset" # an attribute

end
tmp_dir = ARGS[1]
res, sim = Loadh5Param(tmp_dir)
print("-- Starting Julia -- \n") 
print("Using ")
print(Sys.CPU_CORES)
print(" core for the simulation\n")
FFTW.set_num_threads(Sys.CPU_CORES)

# -- Collect Data ---
# ----------------------------------------------------
c0 = 299792458;
π = pi
hbar = 6.634e-34/2/π;
# -- res parameters -- 
ng = res["ng"][1]
R= res["R"][1]
gamm = res["γ"][1]
L=2*pi*R;
Q0 = res["Qi"][1]
Qc = res["Qc"][1]

# -- sim parameters --
t_end = sim["Tscan"][1]
f_pmp = sim["f_pmp"][1]
ω0 = 2*π*f_pmp
dφ = sim["dφ"]
Pin = sim["Pin"][1]
μ_sim = sim["μ_sim"]
δω_init = sim["δω_init"][1]
δω_end = sim["δω_end"][1]

print("Pin\n")
print(Pin)
print("\n")
print("f_pmp\n")
print(f_pmp)
print("\n")
print("ng\n")
print(ng)
print("\n")


μ = collect(μ_sim[1]:μ_sim[2])
pmp_sim = find(μ .== 0)[1]
print("pmp_sim\n")
print(pmp_sim)
print("\n")


j = 1im
# Ns = [mu_sim[1],mu_sim[end]]
tR = L*ng/c0; 
t_end = t_end *tR
f0 = c0/ng/L; 
nlc = -j*L; 
# T=1*tR;
κc = ω0/Qc;
κ = (ω0/Q0 + ω0/Qc);

dω = collect(μ_sim[1]:μ_sim[end])*2*π/tR;
# Qc_disp=Qc*ones(size(dω));
# Qi_disp=Q0*ones(size(dω));
# α_disp=1/2* (( ω0+0*dω)./Qi_disp + ( ω0+0*dω)./Qc_disp) * tR;
# γ_disp=γ*(1+0*dω/ ω0);

# θ_disp=(ω0+0*dω)./Qc_disp*tR;
dβ = dφ;
dβ = dβ-dβ[pmp_sim];
# dφ_Kerr=θ*Pin*γ*L/α^2;

Ein= zeros(size(μ));
Ein[pmp_sim]=sqrt.(Pin)*length(μ)
# Ein_couple=sqrt(θ).*Ein;
# print("Ein_couple\n")
# print(Ein_couple)
# print("\n")

t_end = t_end*tR

Nt= sim["Tscan"][1];
dt=t_end/Nt; 

t1=0;

xx = collect(1:Nt);
# δω_init = δω_init*tR
# δω_end = δω_end*tR
# print("\n")
# print("δω_init\n")
# print(δω_init)
# print("\n")
# print("δω_end\n")
# print(δω_end)
# print("\n")
# print("α\n")
# print(α)
# print("\n")


Δω_pmp = δω_init + xx/Nt * (δω_end- δω_init);

Ephoton=hbar*(ω0+dω);
phase=2*pi*(rand(1,length(μ)));
array=rand(1,length(μ));
Enoise=array'.*sqrt.(Ephoton/2/tR).*exp.(1j*phase') .*length(μ);
# ifft_step = plan_ifft(zeros(size(Enoise)))
# fft_step = plan_fft(zeros(size(Enoise)))
u0=ifft(Enoise); 

S = Dict()
num_probe=1000;
S["u_probe"] = 1im*zeros(num_probe, length(u0))
S["Em_probe"] = 1im*zeros(num_probe, length(u0))
S["detuning"] = zeros(num_probe,)
S["comb_power"] = zeros(num_probe,)
probe=0;

tol=1e-4;  
maxiter=6;
pb = Progress(Int(Nt),0.5, "Calculating temporal loop:", Int(25))


vg = c0/ng


for it = 1:1:Nt
    update!(pb, Int(it)) 
    delta_phi=  Δω_pmp[Int(it)];

    u0=ifft_step*(fft_step*(u0) + 1im*sqrt(κc/tR).*Ein.*dt);
    u1=u0;
    cβ = -κ/2  - 1im*delta_phi +  1im*vg*dβ;
    halfprop = exp.(cβ*dt/2)
    cnt = 0
    uhalf = ifft_step*(halfprop.*(fft_step*(u0)));
    half0 = ifft_step*(vg*γ.*(fft_step*( abs.(u0).^2.*u0) ) )
    for ii = 1:maxiter
        half1 = ifft_step*(γ.*(fft_step*( abs.(u1).^2.*u1) ) ) 
        uv = uhalf .* exp.(1im*L.*(half0./u0 + half1./u1)*dt/2);  
        uv2 = ifft_step*(halfprop.*(fft_step*(uv)));
        if (norm(uv2-u1,2)/norm(u1,2) < tol)
            u1 = uv2;
            break;
        else
            u1 = uv2;
        end
        cnt += 1
    end

    if (cnt == maxiter)
        print("Failed to converge to ...");
    end
    u0=u1;

   if (it*num_probe/Nt > probe)
        probe += 1;
        S["u_probe"][probe,:]=u0[:,1];
        Em_probe = (fft_step*(u0))/length(μ)
        Em_probe = Em_probe[:,1]
        S["Em_probe"][probe,:]= Em_probe;
        # deleteat!(Em_probe,pmp_sim)
        S["comb_power"][probe]=(sum(abs.(Em_probe).^2))/Pin
        # print("\n")
        # print("Comb Power\n")
        # print(S["comb_power"][probe])
        # print("\n")
        S["detuning"][probe] = delta_phi;
   end
   
end
S["Ewg"] = 1im*zeros(size(S["Em_probe"]))
for ii=1:size(S["Em_probe"],1)
    S["Ewg"][ii,:] = Ein/length(μ)-S["Em_probe"][ii,:].*sqrt.(κc/tR)
end
S["freq"] = (ω0 + dω)/(2*pi)
S["ω"] = (ω0 + dω)

SaveResults(tmp_dir, S)
